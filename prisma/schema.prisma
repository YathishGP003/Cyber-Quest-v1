generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  email           String            @unique
  username        String?
  firstName       String?
  lastName        String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  currentLevel    Int               @default(1)
  totalPoints     Int               @default(0)
  clerkId         String            @unique
  bio             String?
  experience      Int?
  imageUrl        String?
  industry        String?
  skills          String[]
  assessments     Assessment[]
  careerProfile   CareerProfile?
  certificates    Certificate[]
  coverLetters    CoverLetter[]
  interviews      Interview[]
  resumes         Resume[]
  industryInsight IndustryInsight?  @relation(fields: [industry], references: [industry])
  achievements    UserAchievement[]
  progress        UserProgress[]
}

model Level {
  id                Int            @id @default(autoincrement())
  name              String
  description       String
  order             Int            @unique
  minPointsToPass   Int
  requiredToAdvance Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  achievements      Achievement[]
  activities        Activity[]
  progress          UserProgress[]
}

model Activity {
  id          Int                @id @default(autoincrement())
  levelId     Int
  name        String
  description String
  type        ActivityType
  content     Json
  points      Int
  order       Int
  isRequired  Boolean            @default(false)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  level       Level              @relation(fields: [levelId], references: [id])
  progress    ActivityProgress[]

  @@unique([levelId, order])
}

model UserProgress {
  id                  Int                @id @default(autoincrement())
  userId              String
  levelId             Int
  isCompleted         Boolean            @default(false)
  pointsEarned        Int                @default(0)
  activitiesCompleted Int                @default(0)
  startedAt           DateTime           @default(now())
  completedAt         DateTime?
  activityProgress    ActivityProgress[]
  level               Level              @relation(fields: [levelId], references: [id])
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, levelId])
}

model ActivityProgress {
  id            Int          @id @default(autoincrement())
  userId        String
  activityId    Int
  progressId    Int
  isCompleted   Boolean      @default(false)
  pointsEarned  Int          @default(0)
  attempts      Int          @default(0)
  lastAttemptAt DateTime?
  completedAt   DateTime?
  answers       Json?
  activity      Activity     @relation(fields: [activityId], references: [id])
  progress      UserProgress @relation(fields: [progressId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
}

model Achievement {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  imageUrl    String?
  levelId     Int?
  criteria    String
  pointsValue Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  type        String?
  level       Level?            @relation(fields: [levelId], references: [id])
  users       UserAchievement[]
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  userId        String
  achievementId Int
  earnedAt      DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Certificate {
  id               Int      @id @default(autoincrement())
  userId           String
  title            String
  description      String
  issueDate        DateTime @default(now())
  verificationCode String   @unique
  skills           String[]
  imageUrl         String?
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CareerProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  industry    String
  subIndustry String
  experience  Int
  skills      String
  bio         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Resume {
  id        String   @id @default(cuid())
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CoverLetter {
  id          String   @id @default(cuid())
  userId      String
  jobTitle    String
  companyName String
  content     String
  userName    String?
  userEmail   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interview {
  id        String   @id @default(cuid())
  userId    String
  industry  String
  questions Json
  answers   Json
  score     Int?
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IndustryInsight {
  industry      String    @id
  description   String
  trends        String[]
  skills        String[]
  salaryRange   String?
  growthRate    Float?
  demandLevel   String?
  marketOutlook String?
  nextUpdate    DateTime?
  users         User[]
}

model Assessment {
  id              String   @id @default(cuid())
  userId          String
  type            String
  score           Int
  feedback        String
  recommendations String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

enum ActivityType {
  QUIZ
  CODE_CHALLENGE
  LAB
  SIMULATION
  READING
}
