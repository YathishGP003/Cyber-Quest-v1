"use client";

import { useState } from "react";
import { Button } from "@/components/ui/button";
import { useRouter } from "next/navigation";
import { CheckCircle, AlertTriangle, Bug, FileText, Wifi, Activity } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";

interface MalwareAnalysisLabProps {
  activity: any;
  userId: string;
  progress: any;
}

interface MalwareSample {
  id: string;
  name: string;
  description: string;
  behavior: {
    fileSystem: string[];
    registry: string[];
    network: string[];
    processes: string[];
  };
  classification: {
    type: string;
    family: string;
    severity: "low" | "medium" | "high" | "critical";
  };
  indicators: string[];
}

export default function MalwareAnalysisLab({ activity, userId, progress }: MalwareAnalysisLabProps) {
  const router = useRouter();
  const [isCompleted, setIsCompleted] = useState(progress?.isCompleted || false);
  const [activeTab, setActiveTab] = useState("samples");
  const [activeSampleId, setActiveSampleId] = useState<string | null>(null);
  const [activeAnalysisTab, setActiveAnalysisTab] = useState("behavior");
  const [userClassifications, setUserClassifications] = useState<Record<string, {
    type: string;
    family: string;
    severity: string;
  }>>({});
  const [userNotes, setUserNotes] = useState<Record<string, string>>({});
  const [showSolutions, setShowSolutions] = useState<Record<string, boolean>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [score, setScore] = useState(0);
  const [results, setResults] = useState<Record<string, any>>({});
  const [showResults, setShowResults] = useState(false);

  // Parse content
  const content = typeof activity.content === 'string'
    ? JSON.parse(activity.content)
    : activity.content;

  const malwareSamples: MalwareSample[] = content.malwareSamples || [];

  const handleSelectSample = (sampleId: string) => {
    setActiveSampleId(sampleId);
    
    // Initialize classification if it doesn't exist
    if (!userClassifications[sampleId]) {
      setUserClassifications(prev => ({
        ...prev,
        [sampleId]: {
          type: "",
          family: "",
          severity: ""
        }
      }));
    }
  };

  const handleClassificationChange = (sampleId: string, field: "type" | "family" | "severity", value: string) => {
    setUserClassifications(prev => ({
      ...prev,
      [sampleId]: {
        ...prev[sampleId],
        [field]: value
      }
    }));
  };

  const handleNotesChange = (sampleId: string, notes: string) => {
    setUserNotes(prev => ({
      ...prev,
      [sampleId]: notes
    }));
  };

  const handleToggleSolution = (sampleId: string) => {
    setShowSolutions(prev => ({
      ...prev,
      [sampleId]: !prev[sampleId]
    }));
  };

  const calculateScore = () => {
    if (malwareSamples.length === 0) return 0;

    let totalPoints = 0;
    let earnedPoints = 0;

    // Each sample is worth equal points
    const pointsPerSample = 100 / malwareSamples.length;

    malwareSamples.forEach(sample => {
      const userClassification = userClassifications[sample.id];
      if (!userClassification) return;

      // Calculate points for this sample (each field is worth 1/3 of the sample's points)
      let samplePoints = 0;
      
      if (userClassification.type === sample.classification.type) {
        samplePoints += pointsPerSample / 3;
      }
      
      if (userClassification.family === sample.classification.family) {
        samplePoints += pointsPerSample / 3;
      }
      
      if (userClassification.severity === sample.classification.severity) {
        samplePoints += pointsPerSample / 3;
      }

      earnedPoints += samplePoints;
    });

    return Math.round(earnedPoints);
  };

  const handleSubmitLab = async () => {
    try {
      setIsSubmitting(true);

      const scoreValue = calculateScore();
      setScore(scoreValue);

      // Success threshold (70%)
      const passed = scoreValue >= 70;

      // Prepare answers for submission
      const submissionData = {
        classifications: userClassifications,
        notes: userNotes
      };

      // Calculate points earned based on score percentage and total possible points
      const pointsEarned = Math.round((scoreValue / 100) * activity.points);

      const payload = {
        isCompleted: passed,
        score: scoreValue,
        pointsEarned,
        answers: submissionData
      };

      // Update activity progress in the database
      const response = await fetch(`/api/activities/${activity.id}/progress`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        throw new Error("Failed to update progress");
      }

      setIsCompleted(passed);
      setShowResults(true);

      // Refresh the page data
      router.refresh();
    } catch (error) {
      console.error("Error submitting lab:", error);
    } finally {
      setIsSubmitting(false);
    }
  };

  // Calculate completeness of classifications
  const getCompletionPercentage = (sampleId: string) => {
    const classification = userClassifications[sampleId];
    if (!classification) return 0;
    
    let completed = 0;
    if (classification.type) completed++;
    if (classification.family) completed++;
    if (classification.severity) completed++;
    
    return Math.round((completed / 3) * 100);
  };

  // Find active sample
  const activeSample = malwareSamples.find(sample => sample.id === activeSampleId);

  // Render results view
  if (showResults) {
    return (
      <div className="space-y-6">
        <div className="text-center p-4">
          <div className="mb-4">
            {score >= 70 ? (
              <CheckCircle className="h-16 w-16 text-green-500 mx-auto" />
            ) : (
              <AlertTriangle className="h-16 w-16 text-yellow-500 mx-auto" />
            )}
          </div>
          
          <h2 className="text-2xl font-bold mb-2">Lab Results</h2>
          <p className="text-gray-400 mb-4">
            {score >= 70 
              ? "Congratulations! You've successfully completed the Malware Analysis Lab." 
              : "You need a score of at least 70% to pass this lab. Review the material and try again."}
          </p>
          
          <div className="text-2xl font-bold mb-6">
            Total Score: {score}%
          </div>
          
          <div className="max-w-2xl mx-auto">
            <Card className="bg-black/40">
              <CardHeader>
                <CardTitle>Sample Analysis Results</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Sample</TableHead>
                      <TableHead>Type</TableHead>
                      <TableHead>Family</TableHead>
                      <TableHead>Severity</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {malwareSamples.map(sample => {
                      const userClassification = userClassifications[sample.id] || { type: "", family: "", severity: "" };
                      
                      return (
                        <TableRow key={sample.id}>
                          <TableCell>{sample.name}</TableCell>
                          <TableCell className={userClassification.type === sample.classification.type ? "text-green-400" : "text-red-400"}>
                            {userClassification.type || "Not classified"}
                          </TableCell>
                          <TableCell className={userClassification.family === sample.classification.family ? "text-green-400" : "text-red-400"}>
                            {userClassification.family || "Not classified"}
                          </TableCell>
                          <TableCell className={userClassification.severity === sample.classification.severity ? "text-green-400" : "text-red-400"}>
                            {userClassification.severity || "Not classified"}
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </div>
          
          <div className="flex justify-center space-x-4 mt-8">
            <Button onClick={() => setShowResults(false)} variant="outline">
              Review Analysis
            </Button>
            <Button asChild>
              <a href={`/levels/${activity.levelId}`}>
                Return to Level
              </a>
            </Button>
          </div>
        </div>
      </div>
    );
  }
  
  // If already completed and not showing results, show the completed state
  if (isCompleted && !showResults) {
    return (
      <div className="text-center py-6">
        <div className="mb-4">
          <CheckCircle className="h-16 w-16 text-green-500 mx-auto" />
        </div>
        <h2 className="text-2xl font-bold mb-2">Lab Completed</h2>
        <p className="text-gray-400 mb-6">You've successfully completed this lab.</p>
        
        <div className="flex justify-center space-x-4">
          <Button variant="outline" onClick={() => setIsCompleted(false)}>
            Review Lab
          </Button>
          <Button asChild>
            <a href={`/levels/${activity.levelId}`}>
              Return to Level
            </a>
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="mb-6">
        <h2 className="text-2xl font-bold">{content.title || "Malware Analysis Lab"}</h2>
        <p className="text-gray-400 mt-1">{content.description || "Analyze malware samples in a controlled environment."}</p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        {/* Samples List */}
        <div className="md:col-span-1">
          <Card className="bg-black/20">
            <CardHeader>
              <CardTitle className="text-lg">Malware Samples</CardTitle>
            </CardHeader>
            <CardContent className="p-0">
              <div className="space-y-1">
                {malwareSamples.map(sample => {
                  const completionPercentage = getCompletionPercentage(sample.id);
                  
                  return (
                    <Button
                      key={sample.id}
                      variant={activeSampleId === sample.id ? "default" : "ghost"}
                      className="w-full justify-start h-auto py-3 px-4"
                      onClick={() => handleSelectSample(sample.id)}
                    >
                      <div className="w-full">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <Bug className="h-4 w-4" />
                            <span className="text-sm">{sample.name}</span>
                          </div>
                          {completionPercentage > 0 && (
                            <span className="text-xs">{completionPercentage}%</span>
                          )}
                        </div>
                        {completionPercentage > 0 && (
                          <Progress value={completionPercentage} className="h-1 mt-1" />
                        )}
                      </div>
                    </Button>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Analysis Area */}
        <div className="md:col-span-3">
          {activeSample ? (
            <Card className="bg-black/20">
              <CardHeader className="pb-3">
                <div className="flex justify-between items-start">
                  <div>
                    <CardTitle>{activeSample.name}</CardTitle>
                    <CardDescription>{activeSample.description}</CardDescription>
                  </div>
                  <Button 
                    variant="link" 
                    onClick={() => handleToggleSolution(activeSample.id)}
                    className="p-0 h-auto font-normal text-blue-400"
                  >
                    {showSolutions[activeSample.id] ? "Hide Solution" : "Show Solution"}
                  </Button>
                </div>
              </CardHeader>
              <CardContent>
                <Tabs 
                  defaultValue="behavior" 
                  value={activeAnalysisTab} 
                  onValueChange={setActiveAnalysisTab}
                  className="w-full"
                >
                  <TabsList className="grid grid-cols-4 mb-6">
                    <TabsTrigger value="behavior">Behavior</TabsTrigger>
                    <TabsTrigger value="network">Network</TabsTrigger>
                    <TabsTrigger value="processes">Processes</TabsTrigger>
                    <TabsTrigger value="classification">Classification</TabsTrigger>
                  </TabsList>
                  
                  {/* Behavioral Analysis */}
                  <TabsContent value="behavior" className="space-y-4">
                    <div>
                      <h3 className="text-lg font-medium mb-2">File System Activity</h3>
                      <ul className="space-y-1 bg-black/30 p-3 rounded-md">
                        {activeSample.behavior.fileSystem.map((activity, idx) => (
                          <li key={idx} className="text-sm font-mono">{activity}</li>
                        ))}
                      </ul>
                    </div>
                    
                    <div>
                      <h3 className="text-lg font-medium mb-2">Registry Activity</h3>
                      <ul className="space-y-1 bg-black/30 p-3 rounded-md">
                        {activeSample.behavior.registry.map((activity, idx) => (
                          <li key={idx} className="text-sm font-mono">{activity}</li>
                        ))}
                      </ul>
                    </div>
                  </TabsContent>
                  
                  {/* Network Analysis */}
                  <TabsContent value="network" className="space-y-4">
                    <h3 className="text-lg font-medium mb-2">Network Connections</h3>
                    <ul className="space-y-1 bg-black/30 p-3 rounded-md">
                      {activeSample.behavior.network.map((connection, idx) => (
                        <li key={idx} className="text-sm font-mono">{connection}</li>
                      ))}
                    </ul>
                    
                    <h3 className="text-lg font-medium mt-4 mb-2">Indicators of Compromise (IoCs)</h3>
                    <ul className="space-y-1 bg-black/30 p-3 rounded-md">
                      {activeSample.indicators.map((indicator, idx) => (
                        <li key={idx} className="text-sm">{indicator}</li>
                      ))}
                    </ul>
                  </TabsContent>
                  
                  {/* Process Analysis */}
                  <TabsContent value="processes" className="space-y-4">
                    <h3 className="text-lg font-medium mb-2">Process Activity</h3>
                    <ul className="space-y-1 bg-black/30 p-3 rounded-md">
                      {activeSample.behavior.processes.map((process, idx) => (
                        <li key={idx} className="text-sm font-mono">{process}</li>
                      ))}
                    </ul>
                  </TabsContent>
                  
                  {/* Classification */}
                  <TabsContent value="classification" className="space-y-4">
                    <div className="grid grid-cols-1 gap-4">
                      <div>
                        <Label htmlFor="malware-type">Malware Type</Label>
                        <Select
                          value={userClassifications[activeSample.id]?.type || ""}
                          onValueChange={(value) => handleClassificationChange(activeSample.id, "type", value)}
                        >
                          <SelectTrigger id="malware-type" className="w-full mt-1">
                            <SelectValue placeholder="Select malware type" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="ransomware">Ransomware</SelectItem>
                            <SelectItem value="trojan">Trojan</SelectItem>
                            <SelectItem value="worm">Worm</SelectItem>
                            <SelectItem value="keylogger">Keylogger</SelectItem>
                            <SelectItem value="rootkit">Rootkit</SelectItem>
                            <SelectItem value="adware">Adware</SelectItem>
                            <SelectItem value="spyware">Spyware</SelectItem>
                            <SelectItem value="backdoor">Backdoor</SelectItem>
                            <SelectItem value="bootkit">Bootkit</SelectItem>
                            <SelectItem value="banker">Banking Trojan</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <Label htmlFor="malware-family">Malware Family</Label>
                        <Select
                          value={userClassifications[activeSample.id]?.family || ""}
                          onValueChange={(value) => handleClassificationChange(activeSample.id, "family", value)}
                        >
                          <SelectTrigger id="malware-family" className="w-full mt-1">
                            <SelectValue placeholder="Select malware family" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="emotet">Emotet</SelectItem>
                            <SelectItem value="wannacry">WannaCry</SelectItem>
                            <SelectItem value="ryuk">Ryuk</SelectItem>
                            <SelectItem value="trickbot">TrickBot</SelectItem>
                            <SelectItem value="zeus">Zeus</SelectItem>
                            <SelectItem value="lokibot">LokiBot</SelectItem>
                            <SelectItem value="dridex">Dridex</SelectItem>
                            <SelectItem value="ursnif">Ursnif</SelectItem>
                            <SelectItem value="gandcrab">GandCrab</SelectItem>
                            <SelectItem value="azorult">Azorult</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <Label htmlFor="malware-severity">Severity Rating</Label>
                        <Select
                          value={userClassifications[activeSample.id]?.severity || ""}
                          onValueChange={(value) => handleClassificationChange(activeSample.id, "severity", value)}
                        >
                          <SelectTrigger id="malware-severity" className="w-full mt-1">
                            <SelectValue placeholder="Select severity" />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="low">Low</SelectItem>
                            <SelectItem value="medium">Medium</SelectItem>
                            <SelectItem value="high">High</SelectItem>
                            <SelectItem value="critical">Critical</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      
                      <div>
                        <Label htmlFor="analysis-notes">Analysis Notes</Label>
                        <Textarea
                          id="analysis-notes"
                          placeholder="Document your analysis findings here..."
                          className="mt-1"
                          value={userNotes[activeSample.id] || ""}
                          onChange={(e) => handleNotesChange(activeSample.id, e.target.value)}
                        />
                      </div>
                    </div>
                  </TabsContent>
                </Tabs>
                
                {/* Solution Panel */}
                {showSolutions[activeSample.id] && (
                  <div className="mt-6 p-4 bg-black/40 rounded-md">
                    <h3 className="text-lg font-medium mb-2">Correct Classification</h3>
                    <div className="grid grid-cols-3 gap-4">
                      <div>
                        <p className="text-sm text-gray-400">Type</p>
                        <p className="font-medium">{activeSample.classification.type}</p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-400">Family</p>
                        <p className="font-medium">{activeSample.classification.family}</p>
                      </div>
                      <div>
                        <p className="text-sm text-gray-400">Severity</p>
                        <p className="font-medium capitalize">{activeSample.classification.severity}</p>
                      </div>
                    </div>
                    
                    <Separator className="my-4" />
                    
                    <h3 className="text-lg font-medium mb-2">Analysis Explanation</h3>
                    <ul className="space-y-2">
                      <li>
                        <span className="font-medium">File System Activity:</span> The malware writes files to system directories and creates persistence mechanisms.
                      </li>
                      <li>
                        <span className="font-medium">Registry Activity:</span> Changes to the registry indicate persistence and possible bootkit behavior.
                      </li>
                      <li>
                        <span className="font-medium">Network Activity:</span> Command and control communications and possible data exfiltration.
                      </li>
                      <li>
                        <span className="font-medium">Process Activity:</span> Creates multiple processes and injects code into legitimate processes.
                      </li>
                    </ul>
                  </div>
                )}
              </CardContent>
            </Card>
          ) : (
            <div className="h-full flex items-center justify-center p-8 bg-black/20 rounded-lg border border-gray-800">
              <div className="text-center">
                <Bug className="h-12 w-12 mx-auto mb-4 text-gray-500" />
                <h3 className="text-lg font-medium mb-2">Select a Malware Sample</h3>
                <p className="text-gray-400">Choose a sample from the list to begin analysis.</p>
              </div>
            </div>
          )}
        </div>
      </div>

      <div className="flex justify-center mt-8">
        <Button onClick={handleSubmitLab} disabled={isSubmitting || !activeSampleId} className="w-full md:w-auto">
          {isSubmitting ? "Submitting..." : "Submit Analysis"}
        </Button>
      </div>
    </div>
  );
} 